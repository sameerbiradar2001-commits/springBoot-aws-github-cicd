name: Build & Deploy Spring Boot to AWS ECS

on:
  push:
    branches:
      - develop   # deploys to staging
    tags:
      - 'v*.*.*'  # deploys to production when tag pushed

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 25
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '25'

      - name: Build Spring Boot JAR with Maven
        run: |
          cd test
          chmod +x mvnw
          ./mvnw clean package -DskipTests

      - name: Upload build artifact (for reuse in next jobs)
        uses: actions/upload-artifact@v4
        with:
          name: springboot-jar
          path: test/target/*.jar

  build-and-push:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download built JAR
        uses: actions/download-artifact@v4
        with:
          name: springboot-jar
          path: target/

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push Docker Image to ECR
        run: |
          IMAGE_TAG=${{ github.sha }}
          if [[ "${{ github.ref }}" =~ ^refs/tags/v ]]; then
            IMAGE_TAG="${GITHUB_REF#refs/tags/}"
          fi

          docker build -f Dockerfile -t ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

        env:
          IMAGE_TAG: ${{ github.sha }}

  deploy-staging:
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Update ECS Task Definition (staging)
        run: |
          TASK_DEF=$(aws ecs describe-task-definition \
            --task-definition ${{ vars.ECS_TASK_DEFINITION_STAGING }} \
            --region ${{ vars.AWS_REGION }})

          NEW_TASK_DEF=$(echo "$TASK_DEF" | jq \
            --arg IMAGE "${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}" \
            '.taskDefinition | .containerDefinitions[0].image = $IMAGE |
             del(.taskDefinitionArn, .revision, .status, .requiresAttributes,
                 .compatibilities, .registeredAt, .registeredBy)')

          NEW_TASK_RESP=$(aws ecs register-task-definition \
            --region ${{ vars.AWS_REGION }} \
            --cli-input-json "$NEW_TASK_DEF")

          NEW_REVISION=$(echo "$NEW_TASK_RESP" | jq -r \
            '.taskDefinition.family + ":" + (.taskDefinition.revision | tostring)')

          aws ecs update-service \
            --cluster ${{ vars.ECS_CLUSTER_STAGING }} \
            --service ${{ vars.ECS_SERVICE_STAGING }} \
            --task-definition "$NEW_REVISION" \
            --region ${{ vars.AWS_REGION }}

          aws ecs wait services-stable \
            --cluster ${{ vars.ECS_CLUSTER_STAGING }} \
            --services ${{ vars.ECS_SERVICE_STAGING }} \
            --region ${{ vars.AWS_REGION }}

  deploy-production:
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Update ECS Task Definition (production)
        run: |
          TASK_DEF=$(aws ecs describe-task-definition \
            --task-definition ${{ vars.ECS_TASK_DEFINITION_PRODUCTION }} \
            --region ${{ vars.AWS_REGION }})

          NEW_TASK_DEF=$(echo "$TASK_DEF" | jq \
            --arg IMAGE "${{ secrets.ECR_REPOSITORY }}:${{ github.ref_name }}" \
            '.taskDefinition | .containerDefinitions[0].image = $IMAGE |
             del(.taskDefinitionArn, .revision, .status, .requiresAttributes,
                 .compatibilities, .registeredAt, .registeredBy)')

          NEW_TASK_RESP=$(aws ecs register-task-definition \
            --region ${{ vars.AWS_REGION }} \
            --cli-input-json "$NEW_TASK_DEF")

          NEW_REVISION=$(echo "$NEW_TASK_RESP" | jq -r \
            '.taskDefinition.family + ":" + (.taskDefinition.revision | tostring)')

          aws ecs update-service \
            --cluster ${{ vars.ECS_CLUSTER_PRODUCTION }} \
            --service ${{ vars.ECS_SERVICE_PRODUCTION }} \
            --task-definition "$NEW_REVISION" \
            --region ${{ vars.AWS_REGION }}

          aws ecs wait services-stable \
            --cluster ${{ vars.ECS_CLUSTER_PRODUCTION }} \
            --services ${{ vars.ECS_SERVICE_PRODUCTION }} \
            --region ${{ vars.AWS_REGION }}
